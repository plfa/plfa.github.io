name: CI

on:
  push:
    branches:
      - dev
  pull_request:
    types:
      - opened
      - synchronize

env:
  CABAL_ARGS: "--project-file=cabal.project.ci"
  CABAL_VERSION: "3.6"
  NODE_VERSION: "16"
  EPUBCHECK_VERSION: "4.2.6"

jobs:

  ################################################################################
  # Build:
  ################################################################################
  build:
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        ghc-version: ["8.10.7"] # "9.2.2"
        include:
          - experimental: false
          - os: windows-latest
            experimental: true
          - deploy: false
          - os: ubuntu-latest
            ghc-version: "8.10.7"
            deploy: true

    name: Build on ${{ matrix.os }} with GHC ${{ matrix.ghc-version }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      # Setup: Setup Node.js

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Setup: Setup GHC and Cabal

      - name: Setup Haskell
        uses: haskell/actions/setup@v2
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc-version }}
          cabal-version: ${{ env.CABAL_VERSION }}

      - name: Cabal freeze
        run: |
          cabal v2-update
          cabal v2-freeze $CABAL_ARGS
        shell: bash

      - name: Cache Haskell
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.setup-haskell.outputs.cabal-store }}
            dist-newstyle
          key: haskell-${{ runner.os }}-${{ matrix.ghc-version }}-${{ hashFiles('cabal.project.ci.freeze') }}
          restore-keys: haskell-${{ runner.os }}-${{ matrix.ghc-version }}-

      # Build: Build PLFA

      - name: Cache build
        uses: actions/cache@v3
        with:
          path: _cache
          key: build-${{ runner.os }}

      - name: Build artifact
        run: make build

      # Test: Test the generated HTML with HTML-validate

      - name: Test with HTML-validate
        run: make test-html-validate

      # Test: Test the generated HTML with HTMLProofer

      - name: Setup Ruby
        if: runner.os == 'Linux' || runner.os == 'macOS'
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Test with HTMLProofer
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: make test-html-proofer
        env:
          NOKOGIRI_USE_SYSTEM_LIBRARIES: true

      # Test: Test the generated EPUB with EPUBCheck

      - name: Cache EPUBCheck
        uses: actions/cache@v3
        id: cache-epubcheck
        with:
          path: ${{ github.workspace }}/epubcheck/epubcheck-${{ env.EPUBCHECK_VERSION }}
          key: epubcheck-${{ runner.os }}-${{ env.EPUBCHECK_VERSION }}

      - name: Setup EPUBCheck
        if: steps.cache-epubcheck.outputs.cache-hit != 'true'
        run: |
          Invoke-WebRequest -Uri "https://github.com/w3c/epubcheck/releases/download/v${{ env.EPUBCHECK_VERSION }}/epubcheck-${{ env.EPUBCHECK_VERSION }}.zip" -OutFile "${{ runner.temp }}/epubcheck.zip"
          Expand-Archive "${{ runner.temp }}/epubcheck.zip" -DestinationPath "${{ github.workspace }}/epubcheck/"
        shell: pwsh

      - name: Test with EPUBCheck
        run: make test-epubcheck
        env:
          EPUBCHECK: "java -jar ${{ github.workspace }}/epubcheck/epubcheck-${{ env.EPUBCHECK_VERSION }}/epubcheck.jar"

      # Upload: From the main matrix configuration, publish the build as an artifact

      - name: Upload artifact
        if: matrix.deploy == 'true' && github.event_name == 'push'
        uses: actions/upload-artifact@v3
        with:
          name: HEAD
          path: _site
          if-no-files-found: error

      - name: Upload artifact for pull request
        if: matrix.deploy == 'true' && github.event_name == 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: PR${{ github.event.pull_request.number }}
          path: _site
          if-no-files-found: error

  ################################################################################
  # Deploy: On successful build, deploy all versions of PLFA to GitHub Pages
  ################################################################################
  deploy:
    name: Deploy
    concurrency: ci-${{ github.ref }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: github.event_name == 'push'
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      # Deploy: Prepare HEAD

      - name: Download artifact
        if: github.event_name == 'push'
        uses: actions/download-artifact@v3
        with:
          name: HEAD
          path: site

      # Deploy: Prepare v19.08

      - name: Cache v19.08
        if: github.event_name == 'push'
        uses: actions/cache@v3
        id: cache-v19_08
        with:
          path: ${{ github.workspace }}/v19.08.zip
          key: version-v19_08

      - name: Download v19.08
        if: github.event_name == 'push' && steps.cache-v19_08.outputs.cache-hit != 'true'
        run: Invoke-WebRequest -Uri "https://github.com/plfa/plfa.github.io/releases/download/v19.08/Website.zip" -OutFile "${{ github.workspace }}/v19.08.zip"
        shell: pwsh

      - name: Deploy v19.08
        if: github.event_name == 'push'
        run: Expand-Archive "${{ github.workspace }}/v19.08.zip" -DestinationPath "site/19.08"
        shell: pwsh

      # Deploy: Prepare v20.07

      - name: Cache v20.07
        if: github.event_name == 'push'
        uses: actions/cache@v3
        id: cache-v20_07
        with:
          path: ${{ github.workspace }}/v20.07.zip
          key: version-v20_07

      - name: Download v20.07
        if: github.event_name == 'push' && steps.cache-v20_07.outputs.cache-hit != 'true'
        run: Invoke-WebRequest -Uri "https://github.com/plfa/plfa.github.io/releases/download/v20.07/Website.zip" -OutFile "${{ github.workspace }}/v20.07.zip"
        shell: pwsh

      - name: Deploy v20.07
        if: github.event_name == 'push'
        run: Expand-Archive "${{ github.workspace }}/v20.07.zip" -DestinationPath "site/20.07"
        shell: pwsh

      # Deploy: Publish to GitHub Pages

      - name: Deploy artifact
        if: github.event_name == 'push'
        uses: JamesIves/github-pages-deploy-action@v4.3.3
        with:
          branch: web
          folder: site

  ################################################################################
  # Release: On tag, publish the HEAD version of the website as a GitHub Release
  ################################################################################
  release:
    name: Release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Download artifact
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/download-artifact@v3
        with:
          name: HEAD
          path: site

      - name: Build release asset
        if: startsWith(github.ref, 'refs/tags/v')
        run: Compress-Archive -Path "site/*" Job-DestinationPath Website.zip
        shell: pwsh

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: Website.zip
          fail_on_unmatched_files: true

  ################################################################################
  # Rebase: On push to dev, automatically rebase open pull requests
  ################################################################################
  rebase:
    name: Rebase Pull Requests
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: linhbn123/rebase-pull-requests@v1.0.1

